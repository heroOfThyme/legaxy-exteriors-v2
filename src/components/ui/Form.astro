---
import type { Form as Props } from '~/types';
import { Icon } from 'astro-icon/components';

const { inputs, textarea, disclaimer, button = 'Contact us', description = '', services = [] } = Astro.props;

// Add your keys directly here
const WEB3FORMS_ACCESS_KEY = 'a0ce7ea2-4ebd-49f8-bdc4-ddc760a8f371';

// Default services if none provided
const defaultServices = [
  { value: 'excavation', label: 'Excavation & Site Preparation', icon: 'tabler:bulldozer' },
  { value: 'drainage', label: 'Drainage Solutions', icon: 'tabler:droplet' },
  { value: 'trenching', label: 'Utility & Drainage Trenching', icon: 'tabler:line-dashed' },
  { value: 'driveways', label: 'Driveway Installation & Repair', icon: 'tabler:road' },
  { value: 'landscaping', label: 'Landscape Grading & Preparation', icon: 'tabler:plant' },
  { value: 'sod', label: 'Sod Installation', icon: 'tabler:garden-cart' },
  { value: 'other', label: 'Other Services', icon: 'tabler:tools' },
];

const serviceOptions = services.length > 0 ? services : defaultServices;
---

<form
  action="https://api.web3forms.com/submit"
  method="POST"
  id="contact-form"
  class="relative p-4 rounded-lg border border-green-800/50 bg-[#050505] overflow-hidden needs-validation"
  data-astro-reload
  novalidate
>
  <!-- Web3Forms required fields -->
  <input type="hidden" name="access_key" value={WEB3FORMS_ACCESS_KEY} />

  <!-- Decorative elements -->
  <div class="absolute top-0 right-0 w-40 h-40 bg-green-900/20 rounded-full -mt-20 -mr-20 z-0"></div>
  <div class="absolute bottom-0 left-0 w-40 h-40 bg-green-900/10 rounded-full -mb-20 -ml-20 z-0"></div>
  <div class="absolute top-1/4 left-10 w-6 h-6 bg-green-600/10 rounded-full z-0"></div>
  <div class="absolute bottom-1/3 right-10 w-8 h-8 bg-green-600/10 rounded-full z-0"></div>

  <div class="relative z-10">
    {
      inputs &&
        inputs.map(
          ({ type = 'text', name, label = '', autocomplete = 'on', placeholder = '' }, index) =>
            name && (
              <div
                class="mb-6 transition-all duration-300 hover:translate-x-1"
                style={{ animationDelay: `${index * 100}ms` }}
              >
                {label && (
                  <label for={name} class="flex items-center text-sm font-medium text-green-400 mb-2">
                    {name === 'name' && <Icon name="tabler:user" class="w-4 h-4 mr-2 inline-block" />}
                    {name === 'email' && <Icon name="tabler:mail" class="w-4 h-4 mr-2 inline-block" />}
                    {name === 'phone' && <Icon name="tabler:phone" class="w-4 h-4 mr-2 inline-block" />}
                    {label} *
                  </label>
                )}
                <input
                  type={type}
                  name={name}
                  id={name}
                  autocomplete={autocomplete}
                  placeholder={placeholder}
                  required={true}
                  class="py-3 px-4 block w-full text-md rounded-lg border-2 border-gray-800 hover:border-green-900 bg-[#0a0a0a] text-white placeholder-gray-500 focus:outline-none focus:border-green-600 focus:ring-2 focus:ring-green-600/50 transition-all duration-300"
                />
                <div class="empty-feedback invalid-feedback text-red-400 text-sm mt-1">
                  Please provide your {label.toLowerCase() || name}.
                </div>
              </div>
            )
        )
    }

    <!-- Service Selection Dropdown with visual enhancements -->
    <div class="mb-6 group transition-all duration-300 hover:translate-x-1">
      <label for="service" class="flex items-center text-sm font-medium text-green-400 mb-2">
        <Icon name="tabler:list-check" class="w-4 h-4 mr-2 inline-block" />
        Service Needed *
      </label>
      <div class="relative">
        <select
          id="service"
          name="service"
          class="appearance-none py-3 px-4 block w-full text-md rounded-lg border-2 border-gray-800 hover:border-green-900 bg-[#0a0a0a] text-white placeholder-gray-500 focus:outline-none focus:border-green-600 focus:ring-2 focus:ring-green-600/50 transition-all duration-300"
          required
        >
          <option value="" disabled selected>Select a service</option>
          {serviceOptions.map((service) => <option value={service.value}>{service.label}</option>)}
        </select>
        <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-400">
          <Icon name="tabler:chevron-down" class="w-5 h-5 group-hover:text-green-500 transition-colors duration-300" />
        </div>
      </div>
      <div class="empty-feedback invalid-feedback text-red-400 text-sm mt-1">Please select a service.</div>
    </div>

    {
      textarea && (
        <div class="mb-6 transition-all duration-300 hover:translate-x-1">
          <label for="textarea" class="flex items-center text-sm font-medium text-green-400 mb-2">
            <Icon name="tabler:message" class="w-4 h-4 mr-2 inline-block" />
            {textarea.label} *
          </label>
          <textarea
            id="textarea"
            name={textarea.name ? textarea.name : 'message'}
            rows={textarea.rows ? textarea.rows : 4}
            placeholder={textarea.placeholder}
            required
            class="py-3 px-4 block w-full text-md rounded-lg border-2 border-gray-800 hover:border-green-900 bg-[#0a0a0a] text-white placeholder-gray-500 focus:outline-none focus:border-green-600 focus:ring-2 focus:ring-green-600/50 resize-none transition-all duration-300"
          />
          <div class="empty-feedback invalid-feedback text-red-400 text-sm mt-1">Please enter your message.</div>
        </div>
      )
    }

    <!-- Cloudflare Turnstile Widget -->
    <div class="cf-turnstile mb-6" data-sitekey="0x4AAAAAABd9Keugc-Mc3KxL" data-theme="dark"></div>

    {
      disclaimer && (
        <div class="mt-6 px-3 py-3 border border-gray-800/30 rounded-lg bg-gray-900/30">
          <p class="text-sm text-gray-400 text-center">
            <Icon name="tabler:info-circle" class="w-4 h-4 mr-2 inline-block text-green-500" />
            {disclaimer.label || 'By filling out this form, you agree to be contacted about our services.'}
          </p>
        </div>
      )
    }

    {
      button && (
        <div class="mt-8 relative">
          <div class="absolute inset-0 bg-gradient-to-r from-green-600/20 to-green-900/20 blur-lg transform group-hover:scale-105 transition-all duration-300" />
          <button
            type="submit"
            class="relative w-full px-6 py-3.5 text-white font-medium rounded-lg overflow-hidden bg-primary focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 focus:ring-offset-[#050505] group"
          >
            <div class="absolute inset-0 w-0 bg-white/10 transition-all duration-500 ease-out group-hover:w-full" />
            <div class="relative flex items-center justify-center">
              <span>{button}</span>
              <Icon
                name="tabler:send"
                class="w-5 h-5 ml-2 transform group-hover:translate-x-1 transition-transform duration-300"
              />
            </div>
          </button>
        </div>
      )
    }

    <div id="result" class="mt-4 text-center"></div>

    {
      description && (
        <div class="mt-4 text-center">
          <p class="text-sm text-gray-500">{description}</p>
        </div>
      )
    }
  </div>
</form>
<style>
  .invalid-feedback,
  .empty-feedback {
    display: none;
  }

  .was-validated :placeholder-shown:invalid ~ .empty-feedback {
    display: block;
  }

  .was-validated :not(:placeholder-shown):invalid ~ .invalid-feedback {
    display: block;
  }

  /* Add these to the end of your existing CSS in Form.astro */
  .was-validated input[type='checkbox']:invalid {
    border-color: #dc3545 !important;
  }

  .was-validated input[type='checkbox']:invalid ~ .empty-feedback {
    display: block !important;
  }

  /* Show select invalid state */
  .was-validated select:invalid ~ .empty-feedback,
  .was-validated select:invalid ~ .invalid-feedback {
    display: block;
  }

  /* Show checkbox invalid state */
  .was-validated input[type='checkbox']:invalid ~ .empty-feedback {
    display: block;
  }

  .is-invalid,
  .was-validated :invalid {
    border-color: #dc3545;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right 1rem center;
    background-size: 1.5em;
  }

  /* Style the feedback messages */
  .invalid-feedback,
  .empty-feedback {
    color: #dc3545;
    font-size: 0.875rem;
    margin-top: 0.25rem;
  }
  
  /* Create a disabled button style */
  button[type="submit"]:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }
  
  /* Subtle pulsing highlight effect on form focus */
  form:focus-within::before {
    content: '';
    position: absolute;
    top: -2px;
    left: -2px;
    right: -2px;
    bottom: -2px;
    background: linear-gradient(45deg, #04582380, transparent, #04582380);
    border-radius: 0.5rem;
    z-index: -1;
    animation: pulse 2s ease-in-out infinite;
  }

  @keyframes pulse {
    0%,
    100% {
      opacity: 0.5;
    }
    50% {
      opacity: 0.8;
    }
  }

  /* Smooth animations for form interactions */
  form input,
  form select,
  form textarea {
    transition: all 0.3s ease;
  }

  form input:focus,
  form select:focus,
  form textarea:focus {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(4, 88, 35, 0.15);
  }
</style>
<script is:inline>
(function () {
    "use strict";
    
    // Track Turnstile initialization state
    let turnstileInitialized = false;
    
    // Initialize Turnstile with error handling
    function initTurnstile() {
        // Ensure the container exists
        const container = document.querySelector('.cf-turnstile');
        if (!container) {
            console.warn('Turnstile container not found');
            return;
        }
        
        // Ensure the script is loaded
        if (!window.turnstile) {
            console.warn('Turnstile script not loaded yet');
            loadTurnstileScript();
            return;
        }
        
        try {
            // Remove any existing widget
            const iframe = container.querySelector('iframe');
            if (iframe) iframe.remove();
            
            // Render new widget with explicit container element
            window.turnstile.render(container, {
                sitekey: 'YOUR_SITE_KEY',
                callback: function(token) {
                    console.log('Turnstile token:', token);
                }
            });
            turnstileInitialized = true;
        } catch (error) {
            console.error('Turnstile initialization error:', error);
        }
    }
  
    
    // Initialize on DOM ready
    document.addEventListener('DOMContentLoaded', function() {
        loadTurnstileScript();
    });
    
    /* Rest of your form validation and submission code */
    const forms = document.querySelectorAll(".needs-validation");
    const result = document.getElementById("result");
    
    Array.prototype.slice.call(forms).forEach(function (form) {
        form.addEventListener(
            "submit",
            function (event) {
                if (!form.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();
                    form.querySelectorAll(":invalid")[0].focus();
                } else {
                    // Verify Turnstile token exists
                    const token = document.querySelector('[name="cf-turnstile-response"]')?.value;
                    if (!token) {
                        event.preventDefault();
                        result.innerHTML = "Please complete the CAPTCHA";
                        result.classList.remove("text-gray-500");
                        result.classList.add("text-red-500");
                        // Force Turnstile reinitialization if missing
                        if (!turnstileInitialized) initTurnstile();
                        return;
                    }
                    
                    /* Rest of your form submission logic */
                }
                form.classList.add("was-validated");
            },
            false
        );
    });
})();
</script>

<script src="https://web3forms.com/client/script.js" async defer></script>